/*
 * Copyright 2015 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

String osDetectedClassifier = getNormalizedOS() + "-" + getNormalizedArch();

dependencies {
    compile 'io.netty:netty-codec-http2:4.1.0.Beta5'
    compile 'io.netty:netty-codec-http:4.1.0.Beta5'
    compile group:"io.netty", name:"netty-tcnative", version:"1.1.33.Fork1", classifier: osDetectedClassifier
}


// Code copied from https://github.com/trustin/os-maven-plugin (required for native netty artifacts) from this file:
// https://github.com/trustin/os-maven-plugin/blob/master/src/main/java/kr/motd/maven/os/Detector.java
private static String getNormalizedOS() {
    String value = normalize(System.getProperty("os.name"));
    if (value.startsWith("aix")) {
        return "aix";
    }
    if (value.startsWith("hpux")) {
        return "hpux";
    }
    if (value.startsWith("os400")) {
        // Avoid the names such as os4000
        if (value.length() <= 5 || !Character.isDigit(value.charAt(5))) {
            return "os400";
        }
    }
    if (value.startsWith("linux")) {
        return "linux";
    }
    if (value.startsWith("macosx") || value.startsWith("osx")) {
        return "osx";
    }
    if (value.startsWith("freebsd")) {
        return "freebsd";
    }
    if (value.startsWith("openbsd")) {
        return "openbsd";
    }
    if (value.startsWith("netbsd")) {
        return "netbsd";
    }
    if (value.startsWith("solaris") || value.startsWith("sunos")) {
        return "sunos";
    }
    if (value.startsWith("windows")) {
        return "windows";
    }

    return "unknown";
}

private static String getNormalizedArch() {
    def osArch = System.getProperty("os.arch");
    String value = normalize(osArch);

    if (value.matches('^(x8664|amd64|ia32e|em64t|x64)$')) {
        return "x86_64";
    }
    if (value.matches('^(x8632|x86|i[3-6]86|ia32|x32)$')) {
        return "x86_32";
    }
    if (value.matches('^(ia64|itanium64)$')) {
        return "itanium_64";
    }
    if (value.matches('^(sparc|sparc32)$')) {
        return "sparc_32";
    }
    if (value.matches('^(sparcv9|sparc64)$')) {
        return "sparc_64";
    }
    if (value.matches('^(arm|arm32)$')) {
        return "arm_32";
    }
    if (value.equals("aarch64")) {
        return "aarch_64";
    }
    if (value.matches('^(ppc|ppc32)$')) {
        return "ppc_32";
    }
    if (value.equals("ppc64")) {
        return "ppc_64";
    }

    return "unknown";
}

private static String normalize(String value) {
    if (value == null) {
        return "";
    }
    return value.toLowerCase(Locale.US).replaceAll("[^a-z0-9]+", "");
}
